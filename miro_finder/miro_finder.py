from collections import deque

def get_maze_answer(maze : dict) -> list:
    """ 미로에 대한 정보를 dict 타입으로 입력 받아서 해당 미로의 답을 반환한다.
    Args:
        maze (dict) : 미로에 대한 정보를 포함하고 있으며, 해당 정보는 위치 정보와 이동 가능한 방향에 대한 정보를 포함한다.
    Example:
        maze = {(1, 1): {'E': 0, 'W': 0, 'N': 0, 'S': 1},
                (2, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
                (3, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
                (1, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
                (2, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
                (3, 2): {'E': 1, 'W': 1, 'N': 1, 'S': 0},
                (1, 3): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
                (2, 3): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
                (3, 3): {'E': 0, 'W': 1, 'N': 1, 'S': 0}}
    Returns:
        maze_solution (list) : `maze` 데이터를 바탕으로 최적의 이동 솔루션을 list 타입으로 출력한다.
                                list의 값은 공간 위치에 대한 정보를 포함한다.
    Example:
        >>> solution = get_maze_answer(maze)
        >>> solution
            [(3, 3), (3, 2), (2, 2), (2, 1), (1, 1)]
    """
    miro_finder = []
    visited = []
    end_point = (1, 1)  # 종료지점을 지정해줌
    start = list(maze.keys())[-1]  # 시작 지점 
    visited.append(start)
    stack = deque()
    stack.append(start)
    dy = [1, -1, 0, 0]
    dx = [0, 0, -1, 1]
    while stack:
        x, y = stack.pop()
        maze_value_list = list(maze[(x, y)].values())
        miro_finder.append((x,y))
        count = 0
        for i in range(4): # (x, y) 에서 방문한 곳을 제외하고 갈 수 있는 길이 두 개 이상인 경우 교차점을 cross_x, cross_y로 표시해둠
            ex = x + dx[i]
            ey = y + dy[i]
            if maze_value_list[i] == 1:  
                count += 1
            if maze_value_list[i] == 1 and (ex, ey) in visited:
                count -= 1
            if count > 1:
                cross_x, cross_y = x, y
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]

            if maze_value_list[0] + maze_value_list[1] + maze_value_list[2] + maze_value_list[3] == 1 and (nx, ny) in visited:  # 갈 곳이 왔던 길 하나 뿐일때
                try:
                    while not miro_finder[-1] == (cross_x, cross_y):  # 교차로가 나올때까지
                        if (cross_x, cross_y) == (0, 0):
                            break
                        elif miro_finder[-1] == end_point:  # 도착한 경우
                            break  
                        miro_finder.pop()  # 교차로가 나올때까지 pop
                except:
                    pass

            if nx < 0 or nx > start[0] or ny < 0 or ny > start[1]:  # 나가면 안 됨
                continue

            if maze_value_list[i] == 0:  # 벽을 만난 경우
                continue

            if maze_value_list[i] == 1 and (nx, ny) not in visited:  # 방문한 곳을 제외하고 갈 곳이 있는 경우
                visited.append((nx, ny))    
                stack.append((nx, ny))
    
    return miro_finder

maze1 = {(1, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (2, 1): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (3, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (4, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (5, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
        (1, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 2): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (3, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (4, 2): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (5, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
        (1, 3): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (2, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (3, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (4, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (5, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
        (1, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (3, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (4, 4): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (5, 4): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, 
        (1, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (3, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (4, 5): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (5, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 0}}

maze2 = {(1, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (2, 1): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (3, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (4, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
                (5, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (1, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 2): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (3, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (4, 2): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
                (5, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 3): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (2, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
                (3, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (4, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (5, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
                (2, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (3, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (4, 4): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (5, 4): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (1, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (3, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
                (4, 5): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (5, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 0}}   

maze3 = {(1, 1): {'E': 0, 'W': 0, 'N': 0, 'S': 1},
        (2, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
        (3, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
        (1, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
        (2, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
        (3, 2): {'E': 1, 'W': 1, 'N': 1, 'S': 0},
        (1, 3): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
        (2, 3): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
        (3, 3): {'E': 0, 'W': 1, 'N': 1, 'S': 0}}     

maze4 = {(1, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
                (2, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
                (3, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
                (4, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
                (5, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
                (6, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
                (7, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
                (1, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
                (2, 2): {'E': 0, 'W': 0, 'N': 0, 'S': 1},
                (3, 2): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
                (4, 2): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
                (5, 2): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
                (6, 2): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
                (7, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
                (1, 3): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
                (2, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
                (3, 3): {'E': 1, 'W': 0, 'N': 0, 'S': 1},
                (4, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
                (5, 3): {'E': 0, 'W': 0, 'N': 0, 'S': 1},
                (6, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 1},
                (7, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
                (1, 4): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
                (2, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
                (3, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
                (4, 4): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
                (5, 4): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
                (6, 4): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
                (7, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
                (1, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
                (2, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 1},
                (3, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 0},
                (4, 5): {'E': 0, 'W': 0, 'N': 0, 'S': 1},
                (5, 5): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
                (6, 5): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
                (7, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 0}}

maze5 = {(1, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 0},
        (2, 1): {'E': 0, 'W': 0, 'N': 0, 'S': 1},
        (3, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 0},
        (1, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 1},
        (2, 2): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
        (3, 2): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
        (1, 3): {'E': 0, 'W': 0, 'N': 0, 'S': 1},
        (2, 3): {'E': 0, 'W': 0, 'N': 1, 'S': 0},
        (3, 3): {'E': 0, 'W': 1, 'N': 0, 'S': 0}}   

maze6 = {(1, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (2, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (3, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (4, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (5, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
        (1, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (3, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (4, 2): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (5, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0},
        (1, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (3, 3): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (4, 3): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (5, 3): {'E': 1, 'W': 1, 'N': 1, 'S': 0},
        (1, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (3, 4): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (4, 4): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (5, 4): {'E': 0, 'W': 1, 'N': 1, 'S': 0},       
        (1, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (3, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (4, 5): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (5, 5): {'E': 0, 'W': 0, 'N': 1, 'S': 0}}

print(get_maze_answer(maze6))  # maze1, maze2, maze3 넣으며 test

